{
  "address": "0x71F414266cc0044D0043B310DE94d488F4d3e2DA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "attacker",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "defender",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "damage",
          "type": "uint8"
        }
      ],
      "name": "DamageDealt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "winner",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "finalHealth",
          "type": "uint8"
        }
      ],
      "name": "GameEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "player1Health",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "player2Health",
          "type": "uint8"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "playerId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "zones",
          "type": "uint8"
        }
      ],
      "name": "PlayerActionReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "playerId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "oldHealth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newHealth",
          "type": "uint8"
        }
      ],
      "name": "PlayerHealthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "player1Complete",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "player2Complete",
          "type": "bool"
        }
      ],
      "name": "RoundCompleted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_HEALTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "player1Health",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "player2Health",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "player1Attack",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "player1Defense",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "player2Attack",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "player2Defense",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "gameWinner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "playerAttackZones",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "playerDefenseZones",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "playerHealth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteSendString",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundCompletions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_string",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "sendString",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x59a9dadd3bf270b8972e0bd7cbbb475e13c5bbc08fd7f0df4fb578aa3b6c7af2",
  "receipt": {
    "to": null,
    "from": "0xAd203c0e9086ADC4991eD385a6793Fa3BCC5904B",
    "contractAddress": "0x71F414266cc0044D0043B310DE94d488F4d3e2DA",
    "transactionIndex": 244,
    "gasUsed": "2403554",
    "logsBloom": "0x
    "blockHash": "0xac8c7dc56ad786be493975dd417eaef6641d3488a810008cc64f78e7a299e340",
    "transactionHash": "0x59a9dadd3bf270b8972e0bd7cbbb475e13c5bbc08fd7f0df4fb578aa3b6c7af2",
    "logs": [
      {
        "transactionIndex": 244,
        "blockNumber": 9001647,
        "transactionHash": "0x59a9dadd3bf270b8972e0bd7cbbb475e13c5bbc08fd7f0df4fb578aa3b6c7af2",
        "address": "0x71F414266cc0044D0043B310DE94d488F4d3e2DA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad203c0e9086adc4991ed385a6793fa3bcc5904b"
        ],
        "data": "0x",
        "logIndex": 581,
        "blockHash": "0xac8c7dc56ad786be493975dd417eaef6641d3488a810008cc64f78e7a299e340"
      },
      {
        "transactionIndex": 244,
        "blockNumber": 9001647,
        "transactionHash": "0x59a9dadd3bf270b8972e0bd7cbbb475e13c5bbc08fd7f0df4fb578aa3b6c7af2",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x00000000000000000000000071f414266cc0044d0043b310de94d488f4d3e2da000000000000000000000000ad203c0e9086adc4991ed385a6793fa3bcc5904b",
        "logIndex": 582,
        "blockHash": "0xac8c7dc56ad786be493975dd417eaef6641d3488a810008cc64f78e7a299e340"
      }
    ],
    "blockNumber": 9001647,
    "cumulativeGasUsed": "28864363",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    "0xAd203c0e9086ADC4991eD385a6793Fa3BCC5904B"
  ],
  "numDeployments": 2,
  "solcInputHash": "bd5bc55a8bdaf0435eafd14e5929bc90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"defender\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"damage\",\"type\":\"uint8\"}],\"name\":\"DamageDealt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"winner\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"finalHealth\",\"type\":\"uint8\"}],\"name\":\"GameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"player1Health\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"player2Health\",\"type\":\"uint8\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"playerId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"zones\",\"type\":\"uint8\"}],\"name\":\"PlayerActionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"playerId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldHealth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newHealth\",\"type\":\"uint8\"}],\"name\":\"PlayerHealthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"player1Complete\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"player2Complete\",\"type\":\"bool\"}],\"name\":\"RoundCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_HEALTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"player1Health\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"player2Health\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"player1Attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"player1Defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"player2Attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"player2Defense\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"gameWinner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"playerAttackZones\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"playerDefenseZones\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"playerHealth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteSendString\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundCompletions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"sendString\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"constructor\":{\"params\":{\"_endpoint\":\"The local chain's LayerZero Endpoint V2 address\",\"_owner\":\"The address permitted to configure this OApp\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteSendString(uint32,string,bytes,bool)\":{\"params\":{\"_dstEid\":\"Destination chain's endpoint ID.\",\"_options\":\"Message execution options (e.g., for sending gas to destination).\",\"_payInLzToken\":\"Whether to return fee in ZRO token.\",\"_string\":\"The string to send.\"},\"returns\":{\"fee\":\"A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendString(uint32,string,bytes)\":{\"params\":{\"_dstEid\":\"Destination Endpoint ID (uint32)\",\"_options\":\"Execution options for gas on the destination (bytes)\",\"_string\":\"The string to send\"}},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SEND()\":{\"notice\":\"Msg type for sending a string, for use in OAppOptionsType3 as an enforced option\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"constructor\":{\"notice\":\"Initialize with Endpoint V2 and owner address\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"getGameState()\":{\"notice\":\"Get current game state\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"lastMessage()\":{\"notice\":\"Last string received from any remote chain\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"quoteSendString(uint32,string,bytes,bool)\":{\"notice\":\"Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token.\"},\"resetGame()\":{\"notice\":\"Reset game state (owner only)\"},\"sendString(uint32,string,bytes)\":{\"notice\":\"Send a string to a remote OApp on another chain\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"},\"startGame()\":{\"notice\":\"Start a new game\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StarHub.sol\":\"StarHub\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/StarHub.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport { OApp, Origin, MessagingFee } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StarHub is OApp, OAppOptionsType3 {\\n    /// @notice Last string received from any remote chain\\n    string public lastMessage;\\n\\n    /// @notice Msg type for sending a string, for use in OAppOptionsType3 as an enforced option\\n    uint16 public constant SEND = 1;\\n\\n    // Global game state tracking\\n    // mapping(round => (player1Complete, player2Complete))\\n    mapping(uint8 => bool[2]) public roundCompletions;\\n\\n    // Player health tracking\\n    mapping(uint8 => uint8) public playerHealth;\\n    uint8 public constant MAX_HEALTH = 7;\\n\\n    // Player zone tracking (from both chains)\\n    mapping(uint8 => uint8) public playerAttackZones;  // Chain A zones\\n    mapping(uint8 => uint8) public playerDefenseZones; // Chain B zones\\n\\n    // Game state\\n    bool public gameActive = false;\\n    uint8 public currentRound = 0;\\n    address public winner = address(0);\\n    \\n    // Events\\n    event PlayerActionReceived(uint8 indexed playerId, uint8 indexed round, uint8 zones);\\n    event RoundCompleted(uint8 indexed round, bool player1Complete, bool player2Complete);\\n    event GameStarted(uint8 player1Health, uint8 player2Health);\\n    event DamageDealt(uint8 indexed attacker, uint8 indexed defender, uint8 damage);\\n    event PlayerHealthUpdated(uint8 indexed playerId, uint8 oldHealth, uint8 newHealth);\\n    event GameEnded(uint8 indexed winner, uint8 finalHealth);\\n\\n\\n    /// @notice Initialize with Endpoint V2 and owner address\\n    /// @param _endpoint The local chain's LayerZero Endpoint V2 address\\n    /// @param _owner    The address permitted to configure this OApp\\n    constructor(address _endpoint, address _owner) OApp(_endpoint, _owner) Ownable(_owner) {}\\n\\n    /// @notice Start a new game\\n    function startGame() external {\\n        require(!gameActive, \\\"Game already active\\\");\\n        \\n        // Initialize player health\\n        playerHealth[1] = MAX_HEALTH;\\n        playerHealth[2] = MAX_HEALTH;\\n        \\n        // Initialize zones\\n        playerAttackZones[1] = 0;\\n        playerAttackZones[2] = 0;\\n        playerDefenseZones[1] = 0;\\n        playerDefenseZones[2] = 0;\\n        \\n        // Reset round completions - clear specific rounds\\n       for (uint8 i = 1; i <= 10; i++) {\\n            delete roundCompletions[i];\\n        }\\n        \\n        gameActive = true;\\n        currentRound = 1;\\n        winner = address(0);\\n        \\n        emit GameStarted(MAX_HEALTH, MAX_HEALTH);\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // 0. (Optional) Quote business logic\\n    //\\n    // Example: Get a quote from the Endpoint for a cost estimate of sending a message.\\n    // Replace this to mirror your own send business logic.\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token.\\n     * @param _dstEid Destination chain's endpoint ID.\\n     * @param _string The string to send.\\n     * @param _options Message execution options (e.g., for sending gas to destination).\\n     * @param _payInLzToken Whether to return fee in ZRO token.\\n     * @return fee A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token.\\n     */\\n    function quoteSendString(\\n        uint32 _dstEid,\\n        string calldata _string,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) public view returns (MessagingFee memory fee) {\\n        bytes memory _message = abi.encode(_string);\\n        // combineOptions (from OAppOptionsType3) merges enforced options set by the contract owner\\n        // with any additional execution options provided by the caller\\n        fee = _quote(_dstEid, _message, combineOptions(_dstEid, SEND, _options), _payInLzToken);\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // 1. Send business logic\\n    //\\n    // Example: send a simple string to a remote chain. Replace this with your\\n    // own state-update logic, then encode whatever data your application needs.\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @notice Send a string to a remote OApp on another chain\\n    /// @param _dstEid   Destination Endpoint ID (uint32)\\n    /// @param _string  The string to send\\n    /// @param _options  Execution options for gas on the destination (bytes)\\n    function sendString(uint32 _dstEid, string calldata _string, bytes calldata _options) external payable {\\n        // 1. (Optional) Update any local state here.\\n        //    e.g., record that a message was \\\"sent\\\":\\n        //    sentCount += 1;\\n\\n        // 2. Encode any data structures you wish to send into bytes\\n        //    You can use abi.encode, abi.encodePacked, or directly splice bytes\\n        //    if you know the format of your data structures\\n        bytes memory _message = abi.encode(_string);\\n\\n        // 3. Call OAppSender._lzSend to package and dispatch the cross-chain message\\n        //    - _dstEid:   remote chain's Endpoint ID\\n        //    - _message:  ABI-encoded string\\n        //    - _options:  combined execution options (enforced + caller-provided)\\n        //    - MessagingFee(msg.value, 0): pay all gas as native token; no ZRO\\n        //    - payable(msg.sender): refund excess gas to caller\\n        //\\n        //    combineOptions (from OAppOptionsType3) merges enforced options set by the contract owner\\n        //    with any additional execution options provided by the caller\\n        _lzSend(\\n            _dstEid,\\n            _message,\\n            combineOptions(_dstEid, SEND, _options),\\n            MessagingFee(msg.value, 0),\\n            payable(msg.sender)\\n        );\\n    }\\n\\n     // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // 2. Receive business logic\\n    //\\n    // Override _lzReceive to decode the incoming bytes and apply your logic.\\n    // The base OAppReceiver.lzReceive ensures:\\n    //   \\u2022 Only the LayerZero Endpoint can call this method\\n    //   \\u2022 The sender is a registered peer (peers[srcEid] == origin.sender)\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @notice Invoked by OAppReceiver when EndpointV2.lzReceive is called\\n    /// @dev   _origin    Metadata (source chain, sender address, nonce)\\n    /// @dev   _guid      Global unique ID for tracking this message\\n    /// @param _message   ABI-encoded bytes (the string we sent earlier)\\n    /// @dev   _executor  Executor address that delivered the message\\n    /// @dev   _extraData Additional data from the Executor (unused here)\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 /*_guid*/,\\n        bytes calldata _message,\\n        address /*_executor*/,\\n        bytes calldata /*_extraData*/\\n    ) internal override {\\n        // Decode the incoming message from the composer\\n        // Format: abi.encode(playerId, zones, currentRound)\\n        (uint8 playerId, uint8 zones, uint8 round) = abi.decode(_message, (uint8, uint8, uint8));\\n        \\n        // Validate player ID\\n        require(playerId == 1 || playerId == 2, \\\"Invalid player ID\\\");\\n\\n        // Update player zones based on source chain\\n        if (_origin.srcEid == 40245) { // Chain A - Attack zones // todo: fix it\\n            playerAttackZones[playerId] = zones;\\n        } else if (_origin.srcEid == 40231) { // Chain B - Defense zones\\n            playerDefenseZones[playerId] = zones;\\n        }\\n        \\n        // Mark the player's action as complete for this round\\n        // playerId 1 maps to index 0, playerId 2 maps to index 1\\n        roundCompletions[round][playerId - 1] = true;\\n        \\n        emit PlayerActionReceived(playerId, round, zones);\\n        \\n        // Check if both players have completed their actions for this round\\n        bool[2] memory completions = roundCompletions[round];\\n        if (completions[0] && completions[1]) {\\n            emit RoundCompleted(round, completions[0], completions[1]);\\n            \\n            // Both players have completed their actions for this round\\n            _processRound(round);\\n        }\\n        \\n        // Store the last message for debugging\\n        lastMessage = string(abi.encodePacked(\\n            \\\"Player \\\", \\n            _uint8ToString(playerId), \\n            \\\" completed round \\\", \\n            _uint8ToString(round), \\n            \\\" with \\\", \\n            _uint8ToString(zones), \\n            \\\" zones\\\"\\n        ));\\n    }\\n\\n    /// @notice Helper function to convert uint8 to string\\n    function _uint8ToString(uint8 _value) internal pure returns (string memory) {\\n        if (_value == 0) return \\\"0\\\";\\n        \\n        uint8 temp = _value;\\n        uint8 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        \\n        bytes memory buffer = new bytes(digits);\\n        while (_value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + _value % 10));\\n            _value /= 10;\\n        }\\n        \\n        return string(buffer);\\n    }\\n\\n    /// @notice Process a completed round\\n    function _processRound(uint8 _round) internal {\\n        require(gameActive, \\\"Game not active\\\");\\n        \\n        // Calculate damage for both players\\n        uint8 damageToPlayer1 = _calculateDamage(2, 1); // Player 2 attacks Player 1\\n        uint8 damageToPlayer2 = _calculateDamage(1, 2); // Player 1 attacks Player 2\\n        \\n        // Apply damage\\n        if (damageToPlayer1 > 0) {\\n            _applyDamage(1, damageToPlayer1);\\n        }\\n        \\n        if (damageToPlayer2 > 0) {\\n            _applyDamage(2, damageToPlayer2);\\n        }\\n        \\n        // Check if game is over\\n        if (playerHealth[1] == 0 || playerHealth[2] == 0) {\\n            _endGame();\\n        } else {\\n            // Prepare for next round\\n            currentRound++;\\n            \\n            // Reset round completions for next round\\n            delete roundCompletions[_round];\\n        }\\n    }\\n\\n    /// @notice Calculate damage between two players\\n    function _calculateDamage(uint8 _attacker, uint8 _defender) internal view returns (uint8) {\\n        uint8 attackPower = playerAttackZones[_attacker];\\n        uint8 defensePower = playerDefenseZones[_defender];\\n        \\n        // Damage = Attack - Defense, minimum 0\\n        if (attackPower > defensePower) {\\n            return attackPower - defensePower;\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice Apply damage to a player\\n    function _applyDamage(uint8 _playerId, uint8 _damage) internal {\\n        uint8 oldHealth = playerHealth[_playerId];\\n        \\n        if (_damage >= oldHealth) {\\n            playerHealth[_playerId] = 0;\\n        } else {\\n            playerHealth[_playerId] = oldHealth - _damage;\\n        }\\n        \\n        emit DamageDealt(_playerId == 1 ? 2 : 1, _playerId, _damage);\\n        emit PlayerHealthUpdated(_playerId, oldHealth, playerHealth[_playerId]);\\n    }\\n\\n    /// @notice End the game and determine winner\\n    function _endGame() internal {\\n        gameActive = false;\\n        \\n        if (playerHealth[1] == 0) {\\n            winner = address(1); // Player 2 wins\\n            emit GameEnded(2, playerHealth[2]);\\n        } else {\\n            winner = address(0); // Player 1 wins\\n            emit GameEnded(1, playerHealth[1]);\\n        }\\n    }\\n    \\n    /// @notice Reset game state (owner only)\\n    function resetGame() external onlyOwner {\\n        gameActive = false;\\n        currentRound = 0;\\n        winner = address(0);\\n        \\n        // Clear all mappings\\n        for (uint8 i = 1; i <= 10; i++) { // Clear up to 10 rounds\\n            delete roundCompletions[i];\\n        }\\n        \\n        delete playerHealth[1];\\n        delete playerHealth[2];\\n        delete playerAttackZones[1];\\n        delete playerAttackZones[2];\\n        delete playerDefenseZones[1];\\n        delete playerDefenseZones[2];\\n    }\\n    \\n    /// @notice Get current game state\\n    function getGameState() external view returns (\\n        bool active,\\n        uint8 round,\\n        uint8 player1Health,\\n        uint8 player2Health,\\n        uint8 player1Attack,\\n        uint8 player1Defense,\\n        uint8 player2Attack,\\n        uint8 player2Defense,\\n        address gameWinner\\n    ) {\\n        return (\\n            gameActive,\\n            currentRound,\\n            playerHealth[1],\\n            playerHealth[2],\\n            playerAttackZones[1],\\n            playerDefenseZones[1],\\n            playerAttackZones[2],\\n            playerDefenseZones[2],\\n            winner\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x726f103b89d6444aaa3d6993457b1053248a01be627fd9678b5c8c16213aeda4\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052600880546001600160b01b03191690553480156200002157600080fd5b5060405162002b7c38038062002b7c83398101604081905262000044916200018c565b81818181806001600160a01b0381166200007857604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000083816200011f565b506001600160a01b038083166080528116620000b257604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000fa57600080fd5b505af11580156200010f573d6000803e3d6000fd5b50505050505050505050620001c4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200018757600080fd5b919050565b60008060408385031215620001a057600080fd5b620001ab836200016f565b9150620001bb602084016200016f565b90509250929050565b6080516129726200020a600039600081816103140152818161073701528181610c500152818161130901528181611585015281816118b5015261196e01526129726000f3fe6080604052600436106101cd5760003560e01c80638da5cb5b116100f7578063ca5eb5e111610095578063f020044f11610064578063f020044f146106bb578063f2fde38b146106d5578063f931def7146106f5578063ff7bd03d1461071557600080fd5b8063ca5eb5e114610625578063d3b4866e14610645578063d65ab5f214610680578063dfbf53ae1461069557600080fd5b8063b98bd070116100d1578063b98bd07014610595578063bb0b6a53146105b5578063bb472219146105f0578063bc70b3541461060557600080fd5b80638da5cb5b1461041a578063b2e7d55e14610438578063b7d0628b1461046857600080fd5b80634b6419eb1161016f578063715018a61161013e578063715018a61461037e5780637d25a05e1461039357806382413eac146103cb5780638a19c8bc146103fb57600080fd5b80634b6419eb146102b25780635535d461146102e25780635e280f11146103025780636fa8a0811461034e57600080fd5b806332970710116101ab57806332970710146102365780633400288b1461025857806336ef9620146102785780634a9ae0b81461028b57600080fd5b806313137d65146101d257806317442b70146101e75780631f5e13341461020e575b600080fd5b6101e56101e0366004611d84565b610735565b005b3480156101f357600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561021a57600080fd5b50610223600181565b60405161ffff9091168152602001610205565b34801561024257600080fd5b5061024b6107f5565b6040516102059190611e73565b34801561026457600080fd5b506101e5610273366004611ea6565b610883565b6101e5610286366004611ed0565b610899565b34801561029757600080fd5b506102a0600781565b60405160ff9091168152602001610205565b3480156102be57600080fd5b506102a06102cd366004611f61565b60076020526000908152604090205460ff1681565b3480156102ee57600080fd5b5061024b6102fd366004611f8e565b6108ed565b34801561030e57600080fd5b506103367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610205565b34801561035a57600080fd5b506102a0610369366004611f61565b60056020526000908152604090205460ff1681565b34801561038a57600080fd5b506101e5610911565b34801561039f57600080fd5b506103b36103ae366004611ea6565b610925565b6040516001600160401b039091168152602001610205565b3480156103d757600080fd5b506103eb6103e6366004611fc1565b61092e565b6040519015158152602001610205565b34801561040757600080fd5b506008546102a090610100900460ff1681565b34801561042657600080fd5b506000546001600160a01b0316610336565b34801561044457600080fd5b506102a0610453366004611f61565b60066020526000908152604090205460ff1681565b34801561047457600080fd5b506008546000805160206128fd8339815191525460008051602061291d833981519152547f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a31547fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b8285460026000527f8819ef417987f8ae7a81f42cdfb18815282fe989326fbff903d13cf0e03ace2954600760209081527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d546040805160ff808b1615158252610100808c04821695830195909552988916918101919091529587166060870152938616608086015291851660a0850152841660c0840152921660e0820152620100009092046001600160a01b03169082015261012001610205565b3480156105a157600080fd5b506101e56105b0366004612027565b610943565b3480156105c157600080fd5b506105e26105d036600461209b565b60016020526000908152604090205481565b604051908152602001610205565b3480156105fc57600080fd5b506101e561095d565b34801561061157600080fd5b5061024b6106203660046120b6565b610a81565b34801561063157600080fd5b506101e5610640366004612116565b610c29565b34801561065157600080fd5b50610665610660366004612133565b610caf565b60408051825181526020928301519281019290925201610205565b34801561068c57600080fd5b506101e5610d0d565b3480156106a157600080fd5b50600854610336906201000090046001600160a01b031681565b3480156106c757600080fd5b506008546103eb9060ff1681565b3480156106e157600080fd5b506101e56106f0366004612116565b610eb6565b34801561070157600080fd5b506103eb6107103660046121ca565b610ef4565b34801561072157600080fd5b506103eb6107303660046121e6565b610f2d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610785576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061079f9061079a908a61209b565b610f63565b146107dd576107b1602088018861209b565b60405163309afaf360e21b815263ffffffff90911660048201526020880135602482015260440161077c565b6107ec87878787878787610f9f565b50505050505050565b6003805461080290612202565b80601f016020809104026020016040519081016040528092919081815260200182805461082e90612202565b801561087b5780601f106108505761010080835404028352916020019161087b565b820191906000526020600020905b81548152906001019060200180831161085e57829003601f168201915b505050505081565b61088b611254565b6108958282611281565b5050565b600084846040516020016108ae92919061225f565b60405160208183030381529060405290506107ec86826108d18960018888610a81565b60405180604001604052803481526020016000815250336112d6565b60026020908152600092835260408084209091529082529020805461080290612202565b610919611254565b61092360006113e1565b565b60005b92915050565b6001600160a01b03811630145b949350505050565b61094b611254565b61089561095882846122e1565b611431565b610965611254565b600880546001600160b01b031916905560015b600a8160ff16116109a85760ff8116600090815260046020526040812055806109a08161241c565b915050610978565b506000805160206128fd833981519152805460ff1990811690915560008051602061291d8339815191528054821690557f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a318054821690557f8819ef417987f8ae7a81f42cdfb18815282fe989326fbff903d13cf0e03ace2980548216905560076020527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880548216905560026000527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d80549091169055565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610ab590612202565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae190612202565b8015610b2e5780601f10610b0357610100808354040283529160200191610b2e565b820191906000526020600020905b815481529060010190602001808311610b1157829003601f168201915b505050505090508051600003610b7e5783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092945061093b9350505050565b6000839003610b8e57905061093b565b60028310610c0c57610bd584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061154392505050565b80610be3846002818861243b565b604051602001610bf593929190612465565b60405160208183030381529060405291505061093b565b8383604051639a6d49cd60e01b815260040161077c92919061225f565b610c31611254565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610c9457600080fd5b505af1158015610ca8573d6000803e3d6000fd5b5050505050565b604080518082019091526000808252602082015260008686604051602001610cd892919061225f565b6040516020818303038152906040529050610d018882610cfb8b60018a8a610a81565b8661156f565b98975050505050505050565b60085460ff1615610d565760405162461bcd60e51b815260206004820152601360248201527247616d6520616c72656164792061637469766560681b604482015260640161077c565b6000805160206128fd8339815191528054600760ff19918216811790925560008051602061291d83398151915280548216831790557f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a318054821690557f8819ef417987f8ae7a81f42cdfb18815282fe989326fbff903d13cf0e03ace298054821690556020919091527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880548216905560026000527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d8054909116905560015b600a8160ff1611610e665760ff811660009081526004602052604081205580610e5e8161241c565b915050610e36565b50600880546001600160b01b03191661010117905560408051600780825260208201527ffc55cc067c35415abed01111d4da0583804cda015f0d752a5bbb9cfdbcb9031c910160405180910390a1565b610ebe611254565b6001600160a01b038116610ee857604051631e4fbdf760e01b81526000600482015260240161077c565b610ef1816113e1565b50565b60046020528160005260406000208160028110610f1057600080fd5b602081049091015460ff601f9092166101000a9004169150829050565b6000602082018035906001908390610f45908661209b565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806109285760405163f6ff4fb760e01b815263ffffffff8416600482015260240161077c565b60008080610faf8789018961248d565b9250925092508260ff1660011480610fca57508260ff166002145b61100a5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c1b185e595c881251607a1b604482015260640161077c565b61101760208b018b61209b565b63ffffffff16619d350361104c5760ff8381166000908152600660205260409020805460ff191691841691909117905561108a565b61105960208b018b61209b565b63ffffffff16619d270361108a5760ff8381166000908152600760205260409020805460ff19169184169190911790555b60ff811660009081526004602052604090206001906110a982866124d0565b60ff16600281106110bc576110bc6124e9565b602091828204019190066101000a81548160ff0219169083151502179055508060ff168360ff167f7a7a6704e384861fc076ca4f4a291483b0cfa6f56d0a16850ed8c592888654b18460405161111b919060ff91909116815260200190565b60405180910390a360ff8116600090815260046020526040808220815180830192839052916002908285855b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116111475790505050505050905080600060028110611191576111916124e9565b602002015180156111a3575060208101515b156111fc5780516020808301516040805193151584529015159183019190915260ff8416917fb481e2040e3855ca9357b8654d94edaf5e5cdb7450804968250121ff8323e650910160405180910390a26111fc82611650565b6112058461177a565b61120e8361177a565b6112178561177a565b604051602001611229939291906124ff565b6040516020818303038152906040526003908161124691906125e9565b505050505050505050505050565b6000546001600160a01b031633146109235760405163118cdaa760e01b815233600482015260240161077c565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b6112de611cc8565b60006112ed8460000151611889565b6020850151909150156113075761130784602001516118b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff1681526020016113578c610f63565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016113939291906126a8565b60806040518083038185885af11580156113b1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113d6919061276f565b979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b815181101561150857611463828281518110611452576114526124e9565b602002602001015160400151611543565b818181518110611475576114756124e9565b60200260200101516040015160026000848481518110611497576114976124e9565b60200260200101516000015163ffffffff1663ffffffff16815260200190815260200160002060008484815181106114d1576114d16124e9565b60200260200101516020015161ffff1661ffff16815260200190815260200160002090816114ff91906125e9565b50600101611434565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6748160405161153891906127c5565b60405180910390a150565b600281015161ffff81166003146108955781604051639a6d49cd60e01b815260040161077c9190611e73565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff1681526020016115d289610f63565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016116079291906126a8565b6040805180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612850565b95945050505050565b60085460ff166116945760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b604482015260640161077c565b60006116a260026001611993565b905060006116b260016002611993565b905060ff8216156116c8576116c86001836119e4565b60ff8116156116dc576116dc6002826119e4565b600160005260056020526000805160206128fd8339815191525460ff16158061171f57506002600052600560205260008051602061291d8339815191525460ff16155b156117315761172c611af9565b505050565b60088054610100900460ff169060016117498361241c565b82546101009290920a60ff818102199093169183160217909155841660009081526004602052604081205550505050565b60608160ff166000036117a45750506040805180820190915260018152600360fc1b602082015290565b8160005b60ff8216156117d157806117bb8161241c565b91506117ca9050600a83612882565b91506117a8565b60008160ff166001600160401b038111156117ee576117ee612273565b6040519080825280601f01601f191660200182016040528015611818576020820181803683370190505b5090505b60ff85161561093b576118306001836124d0565b915061183d600a866128a4565b6118489060306128c6565b60f81b818360ff1681518110611860576118606124e9565b60200101906001600160f81b031916908160001a905350611882600a86612882565b945061181c565b60008134146118ad576040516304fb820960e51b815234600482015260240161077c565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015611911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193591906128df565b90506001600160a01b03811661195e576040516329b99a9560e11b815260040160405180910390fd5b6108956001600160a01b038216337f000000000000000000000000000000000000000000000000000000000000000085611bf7565b60ff8083166000908152600660209081526040808320548585168452600790925282205491929081169116808211156119d9576119d081836124d0565b92505050610928565b506000949350505050565b60ff80831660009081526005602052604090205481169082168111611a225760ff83166000908152600560205260409020805460ff19169055611a50565b611a2c82826124d0565b60ff8481166000908152600560205260409020805460ff1916929091169190911790555b60ff831660018114611a63576001611a66565b60025b60405160ff858116825291909116907f5c2fffd2c6b3d399796c6787582bc4fe23789c65b5a91006828609754dec8fd39060200160405180910390a360ff838116600081815260056020908152604091829020548251868616815294169084015290917fb7e681dd259f8b5e413132d8443484e3c7583c8c641fe43fe40b1c6cf7771217910160405180910390a2505050565b6008805460ff191690556001600090815260056020526000805160206128fd8339815191525460ff169003611b95576008805462010000600160b01b03191662010000179055600260008190526005602090815260008051602061291d8339815191525460405160ff90911681527f4cf8d1fcfd218e15890fb1b4a2df7e7ddd00822b1279340e7d9958b3cdbd7e7391015b60405180910390a2565b6008805462010000600160b01b031916905560016000819052600560209081526000805160206128fd8339815191525460405160ff90911681527f4cf8d1fcfd218e15890fb1b4a2df7e7ddd00822b1279340e7d9958b3cdbd7e739101611b8b565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c51908590611c57565b50505050565b600080602060008451602086016000885af180611c7a576040513d6000823e3d81fd5b50506000513d91508115611c92578060011415611c9f565b6001600160a01b0384163b155b15611c5157604051635274afe760e01b81526001600160a01b038516600482015260240161077c565b60405180606001604052806000801916815260200160006001600160401b03168152602001611d0a604051806040016040528060008152602001600081525090565b905290565b600060608284031215611d2157600080fd5b50919050565b60008083601f840112611d3957600080fd5b5081356001600160401b03811115611d5057600080fd5b602083019150836020828501011115611d6857600080fd5b9250929050565b6001600160a01b0381168114610ef157600080fd5b600080600080600080600060e0888a031215611d9f57600080fd5b611da98989611d0f565b96506060880135955060808801356001600160401b0380821115611dcc57600080fd5b611dd88b838c01611d27565b909750955060a08a01359150611ded82611d6f565b90935060c08901359080821115611e0357600080fd5b50611e108a828b01611d27565b989b979a50959850939692959293505050565b60005b83811015611e3e578181015183820152602001611e26565b50506000910152565b60008151808452611e5f816020860160208601611e23565b601f01601f19169290920160200192915050565b602081526000611e866020830184611e47565b9392505050565b803563ffffffff81168114611ea157600080fd5b919050565b60008060408385031215611eb957600080fd5b611ec283611e8d565b946020939093013593505050565b600080600080600060608688031215611ee857600080fd5b611ef186611e8d565b945060208601356001600160401b0380821115611f0d57600080fd5b611f1989838a01611d27565b90965094506040880135915080821115611f3257600080fd5b50611f3f88828901611d27565b969995985093965092949392505050565b803560ff81168114611ea157600080fd5b600060208284031215611f7357600080fd5b611e8682611f50565b803561ffff81168114611ea157600080fd5b60008060408385031215611fa157600080fd5b611faa83611e8d565b9150611fb860208401611f7c565b90509250929050565b60008060008060a08587031215611fd757600080fd5b611fe18686611d0f565b935060608501356001600160401b03811115611ffc57600080fd5b61200887828801611d27565b909450925050608085013561201c81611d6f565b939692955090935050565b6000806020838503121561203a57600080fd5b82356001600160401b038082111561205157600080fd5b818501915085601f83011261206557600080fd5b81358181111561207457600080fd5b8660208260051b850101111561208957600080fd5b60209290920196919550909350505050565b6000602082840312156120ad57600080fd5b611e8682611e8d565b600080600080606085870312156120cc57600080fd5b6120d585611e8d565b93506120e360208601611f7c565b925060408501356001600160401b038111156120fe57600080fd5b61210a87828801611d27565b95989497509550505050565b60006020828403121561212857600080fd5b8135611e8681611d6f565b6000806000806000806080878903121561214c57600080fd5b61215587611e8d565b955060208701356001600160401b038082111561217157600080fd5b61217d8a838b01611d27565b9097509550604089013591508082111561219657600080fd5b506121a389828a01611d27565b909450925050606087013580151581146121bc57600080fd5b809150509295509295509295565b600080604083850312156121dd57600080fd5b611ec283611f50565b6000606082840312156121f857600080fd5b611e868383611d0f565b600181811c9082168061221657607f821691505b602082108103611d2157634e487b7160e01b600052602260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061093b602083018486612236565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156122ab576122ab612273565b60405290565b604051601f8201601f191681016001600160401b03811182821017156122d9576122d9612273565b604052919050565b60006001600160401b03808411156122fb576122fb612273565b8360051b602061230c8183016122b1565b86815291850191818101903684111561232457600080fd5b865b848110156123fa5780358681111561233e5760008081fd5b880160603682900312156123525760008081fd5b61235a612289565b61236382611e8d565b8152612370868301611f7c565b86820152604080830135898111156123885760008081fd5b9290920191601f368185011261239e5760008081fd5b83358a8111156123b0576123b0612273565b6123c1818301601f19168a016122b1565b915080825236898287010111156123d85760008081fd5b808986018a840137600090820189015290820152845250918301918301612326565b50979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff810361243257612432612406565b60010192915050565b6000808585111561244b57600080fd5b8386111561245857600080fd5b5050820193919092039150565b60008451612477818460208901611e23565b8201838582376000930192835250909392505050565b6000806000606084860312156124a257600080fd5b6124ab84611f50565b92506124b960208501611f50565b91506124c760408501611f50565b90509250925092565b60ff828116828216039081111561092857610928612406565b634e487b7160e01b600052603260045260246000fd5b660283630bcb2b9160cd1b815260008451612521816007850160208901611e23565b7001031b7b6b83632ba32b2103937bab7321607d1b6007918401918201528451612552816018840160208901611e23565b650103bb4ba34160d51b60189290910191820152835161257981601e840160208801611e23565b65207a6f6e657360d01b601e929091019182015260240195945050505050565b601f82111561172c576000816000526020600020601f850160051c810160208610156125c25750805b601f850160051c820191505b818110156125e1578281556001016125ce565b505050505050565b81516001600160401b0381111561260257612602612273565b612616816126108454612202565b84612599565b602080601f83116001811461264b57600084156126335750858301515b600019600386901b1c1916600185901b1785556125e1565b600085815260208120601f198616915b8281101561267a5788860151825594840194600190910190840161265b565b50858210156126985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526126de60e0840182611e47565b90506060850151603f198483030160a08501526126fb8282611e47565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561273357600080fd5b604051604081018181106001600160401b038211171561275557612755612273565b604052825181526020928301519281019290925250919050565b60006080828403121561278157600080fd5b612789612289565b8251815260208301516001600160401b03811681146127a757600080fd5b60208201526127b98460408501612721565b60408201529392505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561284257888303603f190185528151805163ffffffff1684528781015161ffff1688850152860151606087850181905261282e81860183611e47565b9689019694505050908601906001016127ee565b509098975050505050505050565b60006040828403121561286257600080fd5b611e868383612721565b634e487b7160e01b600052601260045260246000fd5b600060ff8316806128955761289561286c565b8060ff84160491505092915050565b600060ff8316806128b7576128b761286c565b8060ff84160691505092915050565b60ff818116838216019081111561092857610928612406565b6000602082840312156128f157600080fd5b8151611e8681611d6f56fe1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733aa264697066735822122054ff8931868bdfa7dc208b33d0531ee353176ed9d2a3f92a95ec115cc8669b0d64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638da5cb5b116100f7578063ca5eb5e111610095578063f020044f11610064578063f020044f146106bb578063f2fde38b146106d5578063f931def7146106f5578063ff7bd03d1461071557600080fd5b8063ca5eb5e114610625578063d3b4866e14610645578063d65ab5f214610680578063dfbf53ae1461069557600080fd5b8063b98bd070116100d1578063b98bd07014610595578063bb0b6a53146105b5578063bb472219146105f0578063bc70b3541461060557600080fd5b80638da5cb5b1461041a578063b2e7d55e14610438578063b7d0628b1461046857600080fd5b80634b6419eb1161016f578063715018a61161013e578063715018a61461037e5780637d25a05e1461039357806382413eac146103cb5780638a19c8bc146103fb57600080fd5b80634b6419eb146102b25780635535d461146102e25780635e280f11146103025780636fa8a0811461034e57600080fd5b806332970710116101ab57806332970710146102365780633400288b1461025857806336ef9620146102785780634a9ae0b81461028b57600080fd5b806313137d65146101d257806317442b70146101e75780631f5e13341461020e575b600080fd5b6101e56101e0366004611d84565b610735565b005b3480156101f357600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561021a57600080fd5b50610223600181565b60405161ffff9091168152602001610205565b34801561024257600080fd5b5061024b6107f5565b6040516102059190611e73565b34801561026457600080fd5b506101e5610273366004611ea6565b610883565b6101e5610286366004611ed0565b610899565b34801561029757600080fd5b506102a0600781565b60405160ff9091168152602001610205565b3480156102be57600080fd5b506102a06102cd366004611f61565b60076020526000908152604090205460ff1681565b3480156102ee57600080fd5b5061024b6102fd366004611f8e565b6108ed565b34801561030e57600080fd5b506103367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610205565b34801561035a57600080fd5b506102a0610369366004611f61565b60056020526000908152604090205460ff1681565b34801561038a57600080fd5b506101e5610911565b34801561039f57600080fd5b506103b36103ae366004611ea6565b610925565b6040516001600160401b039091168152602001610205565b3480156103d757600080fd5b506103eb6103e6366004611fc1565b61092e565b6040519015158152602001610205565b34801561040757600080fd5b506008546102a090610100900460ff1681565b34801561042657600080fd5b506000546001600160a01b0316610336565b34801561044457600080fd5b506102a0610453366004611f61565b60066020526000908152604090205460ff1681565b34801561047457600080fd5b506008546000805160206128fd8339815191525460008051602061291d833981519152547f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a31547fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b8285460026000527f8819ef417987f8ae7a81f42cdfb18815282fe989326fbff903d13cf0e03ace2954600760209081527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d546040805160ff808b1615158252610100808c04821695830195909552988916918101919091529587166060870152938616608086015291851660a0850152841660c0840152921660e0820152620100009092046001600160a01b03169082015261012001610205565b3480156105a157600080fd5b506101e56105b0366004612027565b610943565b3480156105c157600080fd5b506105e26105d036600461209b565b60016020526000908152604090205481565b604051908152602001610205565b3480156105fc57600080fd5b506101e561095d565b34801561061157600080fd5b5061024b6106203660046120b6565b610a81565b34801561063157600080fd5b506101e5610640366004612116565b610c29565b34801561065157600080fd5b50610665610660366004612133565b610caf565b60408051825181526020928301519281019290925201610205565b34801561068c57600080fd5b506101e5610d0d565b3480156106a157600080fd5b50600854610336906201000090046001600160a01b031681565b3480156106c757600080fd5b506008546103eb9060ff1681565b3480156106e157600080fd5b506101e56106f0366004612116565b610eb6565b34801561070157600080fd5b506103eb6107103660046121ca565b610ef4565b34801561072157600080fd5b506103eb6107303660046121e6565b610f2d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610785576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061079f9061079a908a61209b565b610f63565b146107dd576107b1602088018861209b565b60405163309afaf360e21b815263ffffffff90911660048201526020880135602482015260440161077c565b6107ec87878787878787610f9f565b50505050505050565b6003805461080290612202565b80601f016020809104026020016040519081016040528092919081815260200182805461082e90612202565b801561087b5780601f106108505761010080835404028352916020019161087b565b820191906000526020600020905b81548152906001019060200180831161085e57829003601f168201915b505050505081565b61088b611254565b6108958282611281565b5050565b600084846040516020016108ae92919061225f565b60405160208183030381529060405290506107ec86826108d18960018888610a81565b60405180604001604052803481526020016000815250336112d6565b60026020908152600092835260408084209091529082529020805461080290612202565b610919611254565b61092360006113e1565b565b60005b92915050565b6001600160a01b03811630145b949350505050565b61094b611254565b61089561095882846122e1565b611431565b610965611254565b600880546001600160b01b031916905560015b600a8160ff16116109a85760ff8116600090815260046020526040812055806109a08161241c565b915050610978565b506000805160206128fd833981519152805460ff1990811690915560008051602061291d8339815191528054821690557f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a318054821690557f8819ef417987f8ae7a81f42cdfb18815282fe989326fbff903d13cf0e03ace2980548216905560076020527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880548216905560026000527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d80549091169055565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610ab590612202565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae190612202565b8015610b2e5780601f10610b0357610100808354040283529160200191610b2e565b820191906000526020600020905b815481529060010190602001808311610b1157829003601f168201915b505050505090508051600003610b7e5783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092945061093b9350505050565b6000839003610b8e57905061093b565b60028310610c0c57610bd584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061154392505050565b80610be3846002818861243b565b604051602001610bf593929190612465565b60405160208183030381529060405291505061093b565b8383604051639a6d49cd60e01b815260040161077c92919061225f565b610c31611254565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610c9457600080fd5b505af1158015610ca8573d6000803e3d6000fd5b5050505050565b604080518082019091526000808252602082015260008686604051602001610cd892919061225f565b6040516020818303038152906040529050610d018882610cfb8b60018a8a610a81565b8661156f565b98975050505050505050565b60085460ff1615610d565760405162461bcd60e51b815260206004820152601360248201527247616d6520616c72656164792061637469766560681b604482015260640161077c565b6000805160206128fd8339815191528054600760ff19918216811790925560008051602061291d83398151915280548216831790557f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a318054821690557f8819ef417987f8ae7a81f42cdfb18815282fe989326fbff903d13cf0e03ace298054821690556020919091527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880548216905560026000527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d8054909116905560015b600a8160ff1611610e665760ff811660009081526004602052604081205580610e5e8161241c565b915050610e36565b50600880546001600160b01b03191661010117905560408051600780825260208201527ffc55cc067c35415abed01111d4da0583804cda015f0d752a5bbb9cfdbcb9031c910160405180910390a1565b610ebe611254565b6001600160a01b038116610ee857604051631e4fbdf760e01b81526000600482015260240161077c565b610ef1816113e1565b50565b60046020528160005260406000208160028110610f1057600080fd5b602081049091015460ff601f9092166101000a9004169150829050565b6000602082018035906001908390610f45908661209b565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806109285760405163f6ff4fb760e01b815263ffffffff8416600482015260240161077c565b60008080610faf8789018961248d565b9250925092508260ff1660011480610fca57508260ff166002145b61100a5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c1b185e595c881251607a1b604482015260640161077c565b61101760208b018b61209b565b63ffffffff16619d350361104c5760ff8381166000908152600660205260409020805460ff191691841691909117905561108a565b61105960208b018b61209b565b63ffffffff16619d270361108a5760ff8381166000908152600760205260409020805460ff19169184169190911790555b60ff811660009081526004602052604090206001906110a982866124d0565b60ff16600281106110bc576110bc6124e9565b602091828204019190066101000a81548160ff0219169083151502179055508060ff168360ff167f7a7a6704e384861fc076ca4f4a291483b0cfa6f56d0a16850ed8c592888654b18460405161111b919060ff91909116815260200190565b60405180910390a360ff8116600090815260046020526040808220815180830192839052916002908285855b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116111475790505050505050905080600060028110611191576111916124e9565b602002015180156111a3575060208101515b156111fc5780516020808301516040805193151584529015159183019190915260ff8416917fb481e2040e3855ca9357b8654d94edaf5e5cdb7450804968250121ff8323e650910160405180910390a26111fc82611650565b6112058461177a565b61120e8361177a565b6112178561177a565b604051602001611229939291906124ff565b6040516020818303038152906040526003908161124691906125e9565b505050505050505050505050565b6000546001600160a01b031633146109235760405163118cdaa760e01b815233600482015260240161077c565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b6112de611cc8565b60006112ed8460000151611889565b6020850151909150156113075761130784602001516118b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff1681526020016113578c610f63565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016113939291906126a8565b60806040518083038185885af11580156113b1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113d6919061276f565b979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b815181101561150857611463828281518110611452576114526124e9565b602002602001015160400151611543565b818181518110611475576114756124e9565b60200260200101516040015160026000848481518110611497576114976124e9565b60200260200101516000015163ffffffff1663ffffffff16815260200190815260200160002060008484815181106114d1576114d16124e9565b60200260200101516020015161ffff1661ffff16815260200190815260200160002090816114ff91906125e9565b50600101611434565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6748160405161153891906127c5565b60405180910390a150565b600281015161ffff81166003146108955781604051639a6d49cd60e01b815260040161077c9190611e73565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff1681526020016115d289610f63565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016116079291906126a8565b6040805180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612850565b95945050505050565b60085460ff166116945760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b604482015260640161077c565b60006116a260026001611993565b905060006116b260016002611993565b905060ff8216156116c8576116c86001836119e4565b60ff8116156116dc576116dc6002826119e4565b600160005260056020526000805160206128fd8339815191525460ff16158061171f57506002600052600560205260008051602061291d8339815191525460ff16155b156117315761172c611af9565b505050565b60088054610100900460ff169060016117498361241c565b82546101009290920a60ff818102199093169183160217909155841660009081526004602052604081205550505050565b60608160ff166000036117a45750506040805180820190915260018152600360fc1b602082015290565b8160005b60ff8216156117d157806117bb8161241c565b91506117ca9050600a83612882565b91506117a8565b60008160ff166001600160401b038111156117ee576117ee612273565b6040519080825280601f01601f191660200182016040528015611818576020820181803683370190505b5090505b60ff85161561093b576118306001836124d0565b915061183d600a866128a4565b6118489060306128c6565b60f81b818360ff1681518110611860576118606124e9565b60200101906001600160f81b031916908160001a905350611882600a86612882565b945061181c565b60008134146118ad576040516304fb820960e51b815234600482015260240161077c565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015611911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193591906128df565b90506001600160a01b03811661195e576040516329b99a9560e11b815260040160405180910390fd5b6108956001600160a01b038216337f000000000000000000000000000000000000000000000000000000000000000085611bf7565b60ff8083166000908152600660209081526040808320548585168452600790925282205491929081169116808211156119d9576119d081836124d0565b92505050610928565b506000949350505050565b60ff80831660009081526005602052604090205481169082168111611a225760ff83166000908152600560205260409020805460ff19169055611a50565b611a2c82826124d0565b60ff8481166000908152600560205260409020805460ff1916929091169190911790555b60ff831660018114611a63576001611a66565b60025b60405160ff858116825291909116907f5c2fffd2c6b3d399796c6787582bc4fe23789c65b5a91006828609754dec8fd39060200160405180910390a360ff838116600081815260056020908152604091829020548251868616815294169084015290917fb7e681dd259f8b5e413132d8443484e3c7583c8c641fe43fe40b1c6cf7771217910160405180910390a2505050565b6008805460ff191690556001600090815260056020526000805160206128fd8339815191525460ff169003611b95576008805462010000600160b01b03191662010000179055600260008190526005602090815260008051602061291d8339815191525460405160ff90911681527f4cf8d1fcfd218e15890fb1b4a2df7e7ddd00822b1279340e7d9958b3cdbd7e7391015b60405180910390a2565b6008805462010000600160b01b031916905560016000819052600560209081526000805160206128fd8339815191525460405160ff90911681527f4cf8d1fcfd218e15890fb1b4a2df7e7ddd00822b1279340e7d9958b3cdbd7e739101611b8b565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c51908590611c57565b50505050565b600080602060008451602086016000885af180611c7a576040513d6000823e3d81fd5b50506000513d91508115611c92578060011415611c9f565b6001600160a01b0384163b155b15611c5157604051635274afe760e01b81526001600160a01b038516600482015260240161077c565b60405180606001604052806000801916815260200160006001600160401b03168152602001611d0a604051806040016040528060008152602001600081525090565b905290565b600060608284031215611d2157600080fd5b50919050565b60008083601f840112611d3957600080fd5b5081356001600160401b03811115611d5057600080fd5b602083019150836020828501011115611d6857600080fd5b9250929050565b6001600160a01b0381168114610ef157600080fd5b600080600080600080600060e0888a031215611d9f57600080fd5b611da98989611d0f565b96506060880135955060808801356001600160401b0380821115611dcc57600080fd5b611dd88b838c01611d27565b909750955060a08a01359150611ded82611d6f565b90935060c08901359080821115611e0357600080fd5b50611e108a828b01611d27565b989b979a50959850939692959293505050565b60005b83811015611e3e578181015183820152602001611e26565b50506000910152565b60008151808452611e5f816020860160208601611e23565b601f01601f19169290920160200192915050565b602081526000611e866020830184611e47565b9392505050565b803563ffffffff81168114611ea157600080fd5b919050565b60008060408385031215611eb957600080fd5b611ec283611e8d565b946020939093013593505050565b600080600080600060608688031215611ee857600080fd5b611ef186611e8d565b945060208601356001600160401b0380821115611f0d57600080fd5b611f1989838a01611d27565b90965094506040880135915080821115611f3257600080fd5b50611f3f88828901611d27565b969995985093965092949392505050565b803560ff81168114611ea157600080fd5b600060208284031215611f7357600080fd5b611e8682611f50565b803561ffff81168114611ea157600080fd5b60008060408385031215611fa157600080fd5b611faa83611e8d565b9150611fb860208401611f7c565b90509250929050565b60008060008060a08587031215611fd757600080fd5b611fe18686611d0f565b935060608501356001600160401b03811115611ffc57600080fd5b61200887828801611d27565b909450925050608085013561201c81611d6f565b939692955090935050565b6000806020838503121561203a57600080fd5b82356001600160401b038082111561205157600080fd5b818501915085601f83011261206557600080fd5b81358181111561207457600080fd5b8660208260051b850101111561208957600080fd5b60209290920196919550909350505050565b6000602082840312156120ad57600080fd5b611e8682611e8d565b600080600080606085870312156120cc57600080fd5b6120d585611e8d565b93506120e360208601611f7c565b925060408501356001600160401b038111156120fe57600080fd5b61210a87828801611d27565b95989497509550505050565b60006020828403121561212857600080fd5b8135611e8681611d6f565b6000806000806000806080878903121561214c57600080fd5b61215587611e8d565b955060208701356001600160401b038082111561217157600080fd5b61217d8a838b01611d27565b9097509550604089013591508082111561219657600080fd5b506121a389828a01611d27565b909450925050606087013580151581146121bc57600080fd5b809150509295509295509295565b600080604083850312156121dd57600080fd5b611ec283611f50565b6000606082840312156121f857600080fd5b611e868383611d0f565b600181811c9082168061221657607f821691505b602082108103611d2157634e487b7160e01b600052602260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061093b602083018486612236565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156122ab576122ab612273565b60405290565b604051601f8201601f191681016001600160401b03811182821017156122d9576122d9612273565b604052919050565b60006001600160401b03808411156122fb576122fb612273565b8360051b602061230c8183016122b1565b86815291850191818101903684111561232457600080fd5b865b848110156123fa5780358681111561233e5760008081fd5b880160603682900312156123525760008081fd5b61235a612289565b61236382611e8d565b8152612370868301611f7c565b86820152604080830135898111156123885760008081fd5b9290920191601f368185011261239e5760008081fd5b83358a8111156123b0576123b0612273565b6123c1818301601f19168a016122b1565b915080825236898287010111156123d85760008081fd5b808986018a840137600090820189015290820152845250918301918301612326565b50979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff810361243257612432612406565b60010192915050565b6000808585111561244b57600080fd5b8386111561245857600080fd5b5050820193919092039150565b60008451612477818460208901611e23565b8201838582376000930192835250909392505050565b6000806000606084860312156124a257600080fd5b6124ab84611f50565b92506124b960208501611f50565b91506124c760408501611f50565b90509250925092565b60ff828116828216039081111561092857610928612406565b634e487b7160e01b600052603260045260246000fd5b660283630bcb2b9160cd1b815260008451612521816007850160208901611e23565b7001031b7b6b83632ba32b2103937bab7321607d1b6007918401918201528451612552816018840160208901611e23565b650103bb4ba34160d51b60189290910191820152835161257981601e840160208801611e23565b65207a6f6e657360d01b601e929091019182015260240195945050505050565b601f82111561172c576000816000526020600020601f850160051c810160208610156125c25750805b601f850160051c820191505b818110156125e1578281556001016125ce565b505050505050565b81516001600160401b0381111561260257612602612273565b612616816126108454612202565b84612599565b602080601f83116001811461264b57600084156126335750858301515b600019600386901b1c1916600185901b1785556125e1565b600085815260208120601f198616915b8281101561267a5788860151825594840194600190910190840161265b565b50858210156126985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526126de60e0840182611e47565b90506060850151603f198483030160a08501526126fb8282611e47565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561273357600080fd5b604051604081018181106001600160401b038211171561275557612755612273565b604052825181526020928301519281019290925250919050565b60006080828403121561278157600080fd5b612789612289565b8251815260208301516001600160401b03811681146127a757600080fd5b60208201526127b98460408501612721565b60408201529392505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561284257888303603f190185528151805163ffffffff1684528781015161ffff1688850152860151606087850181905261282e81860183611e47565b9689019694505050908601906001016127ee565b509098975050505050505050565b60006040828403121561286257600080fd5b611e868383612721565b634e487b7160e01b600052601260045260246000fd5b600060ff8316806128955761289561286c565b8060ff84160491505092915050565b600060ff8316806128b7576128b761286c565b8060ff84160691505092915050565b60ff818116838216019081111561092857610928612406565b6000602082840312156128f157600080fd5b8151611e8681611d6f56fe1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733aa264697066735822122054ff8931868bdfa7dc208b33d0531ee353176ed9d2a3f92a95ec115cc8669b0d64736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "constructor": {
        "params": {
          "_endpoint": "The local chain's LayerZero Endpoint V2 address",
          "_owner": "The address permitted to configure this OApp"
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteSendString(uint32,string,bytes,bool)": {
        "params": {
          "_dstEid": "Destination chain's endpoint ID.",
          "_options": "Message execution options (e.g., for sending gas to destination).",
          "_payInLzToken": "Whether to return fee in ZRO token.",
          "_string": "The string to send."
        },
        "returns": {
          "fee": "A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendString(uint32,string,bytes)": {
        "params": {
          "_dstEid": "Destination Endpoint ID (uint32)",
          "_options": "Execution options for gas on the destination (bytes)",
          "_string": "The string to send"
        }
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "SEND()": {
        "notice": "Msg type for sending a string, for use in OAppOptionsType3 as an enforced option"
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "constructor": {
        "notice": "Initialize with Endpoint V2 and owner address"
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "getGameState()": {
        "notice": "Get current game state"
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "lastMessage()": {
        "notice": "Last string received from any remote chain"
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "quoteSendString(uint32,string,bytes,bool)": {
        "notice": "Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token."
      },
      "resetGame()": {
        "notice": "Reset game state (owner only)"
      },
      "sendString(uint32,string,bytes)": {
        "notice": "Send a string to a remote OApp on another chain"
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      },
      "startGame()": {
        "notice": "Start a new game"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3233,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1927,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 2531,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 6427,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "lastMessage",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6437,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "roundCompletions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_array(t_bool)2_storage)"
      },
      {
        "astId": 6441,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "playerHealth",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint8,t_uint8)"
      },
      {
        "astId": 6448,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "playerAttackZones",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint8,t_uint8)"
      },
      {
        "astId": 6452,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "playerDefenseZones",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint8,t_uint8)"
      },
      {
        "astId": 6455,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "gameActive",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 6458,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "currentRound",
        "offset": 1,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 6464,
        "contract": "contracts/StarHub.sol:StarHub",
        "label": "winner",
        "offset": 2,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)2_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[2]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_mapping(t_uint8,t_array(t_bool)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bool[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_bool)2_storage"
      },
      "t_mapping(t_uint8,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}